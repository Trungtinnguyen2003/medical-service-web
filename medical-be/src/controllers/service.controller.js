const db = require("../models");
const serviceService = require("../services/service.service");
const Service = db.Service;
const Department = db.Department;
const { generateUniqueSlug } = require("../utils/slugify");

const getAllServices = async (req, res) => {
  try {
    const list = await Service.findAll({
      include: [
        { model: Department, as: "departments", attributes: ["id", "name"] },
      ],
    });
    res.json(list);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch", error: err.message });
  }
};

const getServiceById = async (req, res) => {
  try {
    const service = await serviceService.getById(req.params.id);
    if (!service)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•" });
    res.json(service);
  } catch (err) {
    res.status(500).json({ message: "L·ªói", error: err.message });
  }
};

const createService = async (req, res) => {
  try {
    console.log("üì¶ Payload nh·∫≠n ƒë∆∞·ª£c:", req.body);

    const { departmentIds = [], ...data } = req.body;

    if (!data.title)
      return res.status(400).json({ message: "Thi·∫øu ti√™u ƒë·ªÅ d·ªãch v·ª•" });

    // ‚úÖ L√†m s·∫°ch slug n·∫øu c√≥
    data.slug = data.slug?.trim();

    if (!data.slug) {
      // ‚úÖ N·∫øu kh√¥ng c√≥ slug ‚Üí t·ª± sinh t·ª´ title
      data.slug = await generateUniqueSlug(data.title, Service);
    } else {
      // ‚úÖ N·∫øu c√≥ slug ‚Üí ki·ªÉm tra tr√πng
      const exists = await Service.findOne({ where: { slug: data.slug } });
      if (exists) return res.status(400).json({ message: "Slug ƒë√£ t·ªìn t·∫°i." });
    }

    // ‚úÖ T·∫°o d·ªãch v·ª•
    const newService = await serviceService.create(data);

    // ‚úÖ G√°n chuy√™n khoa n·∫øu c√≥
    if (Array.isArray(departmentIds)) {
      await newService.setDepartments(departmentIds);
    }

    res.status(201).json({
      message: "T·∫°o d·ªãch v·ª• th√†nh c√¥ng",
      service: newService,
    });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o d·ªãch v·ª•:", err);
    res.status(500).json({ message: "L·ªói t·∫°o d·ªãch v·ª•", error: err.message });
  }
};

const updateService = async (req, res) => {
  try {
    const { departmentIds = [], ...data } = req.body;

    const updated = await serviceService.update(req.params.id, data);
    const service = await Service.findByPk(req.params.id);
    if (!service)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•" });

    if (Array.isArray(departmentIds)) {
      await service.setDepartments(departmentIds);
    }

    res.json({ message: "C·∫≠p nh·∫≠t d·ªãch v·ª• th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t", error: err.message });
  }
};

const deleteService = async (req, res) => {
  try {
    await serviceService.remove(req.params.id);
    res.json({ message: "Xo√° d·ªãch v·ª• th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói xo√°", error: err.message });
  }
};

const setDepartments = async (req, res) => {
  try {
    const service = await Service.findByPk(req.params.id);
    if (!service)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•" });

    const { departmentIds } = req.body;
    if (!Array.isArray(departmentIds)) {
      return res
        .status(400)
        .json({ message: "D·ªØ li·ªáu chuy√™n khoa ph·∫£i l√† m·∫£ng" });
    }

    await service.setDepartments(departmentIds);
    res.json({ message: "C·∫≠p nh·∫≠t chuy√™n khoa th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t", error: err.message });
  }
};

const getDepartmentsOfService = async (req, res) => {
  try {
    const service = await Service.findByPk(req.params.id, {
      include: [{ model: Department, as: "departments" }],
    });
    if (!service)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•" });
    res.json(service.departments);
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói khi l·∫•y danh s√°ch khoa", error: err.message });
  }
};

module.exports = {
  getAllServices,
  getServiceById,
  createService,
  updateService,
  deleteService,
  setDepartments,
  getDepartmentsOfService,
};
