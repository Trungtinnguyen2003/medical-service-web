const db = require("../models");
const Doctor = db.Doctor;
const Department = db.Department;
const { generateUniqueSlug } = require("../utils/slugify");

const doctorService = require("../services/doctor.service");

const getAllDoctors = async (req, res) => {
  try {
    const result = await doctorService.getAll();

    // ‚úÖ Ch·ªâ l·ªçc nh·ªØng b√°c sƒ© c√≥ user.status = "approved"
    const approvedDoctors = result.filter(
      (doc) => doc.user && doc.user.status === "approved"
    );

    res.json(approvedDoctors);
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói l·∫•y danh s√°ch b√°c sƒ©", error: err.message });
  }
};

const getDoctorById = async (req, res) => {
  try {
    const doctor = await doctorService.getById(req.params.id);
    if (!doctor)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });
    res.json(doctor);
  } catch (err) {
    res.status(500).json({ message: "L·ªói", error: err.message });
  }
};

const createDoctor = async (req, res) => {
  try {
    const { departmentIds = [], serviceIds = [], ...doctorData } = req.body;

    if (!doctorData.name)
      return res.status(400).json({ message: "Thi·∫øu t√™n b√°c sƒ©" });

    // T·ª± sinh slug
    doctorData.slug = await generateUniqueSlug(doctorData.name, Doctor);

    const newDoctor = await doctorService.create(doctorData);

    if (Array.isArray(departmentIds)) {
      await newDoctor.setDepartments(departmentIds);
    }

    if (Array.isArray(serviceIds)) {
      await newDoctor.setServices(serviceIds);
    }

    res
      .status(201)
      .json({ message: "T·∫°o b√°c sƒ© th√†nh c√¥ng", doctor: newDoctor });
  } catch (err) {
    res.status(500).json({ message: "L·ªói t·∫°o b√°c sƒ©", error: err.message });
  }
};

const updateDoctor = async (req, res) => {
  try {
    const { departmentIds = [], serviceIds = [], ...doctorData } = req.body;

    const doctor = await doctorService.update(req.params.id, doctorData);
    if (!doctor)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });

    if (Array.isArray(departmentIds)) {
      await doctor.setDepartments(departmentIds);
    }

    if (Array.isArray(serviceIds)) {
      await doctor.setServices(serviceIds);
    }

    res.json({ message: "C·∫≠p nh·∫≠t b√°c sƒ© th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t", error: err.message });
  }
};

const deleteDoctor = async (req, res) => {
  try {
    const success = await doctorService.remove(req.params.id);
    if (!success)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });
    res.json({ message: "Xo√° b√°c sƒ© th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói xo√°", error: err.message });
  }
};

const setDepartments = async (req, res) => {
  try {
    const doctor = await Doctor.findByPk(req.params.id);
    if (!doctor)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });

    const { departmentIds } = req.body;
    if (!Array.isArray(departmentIds)) {
      return res
        .status(400)
        .json({ message: "D·ªØ li·ªáu chuy√™n khoa ph·∫£i l√† m·∫£ng" });
    }

    await doctor.setDepartments(departmentIds);
    res.json({ message: "ƒê√£ c·∫≠p nh·∫≠t chuy√™n khoa cho b√°c sƒ©." });
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói c·∫≠p nh·∫≠t chuy√™n khoa", error: err.message });
  }
};

const getDepartmentsOfDoctor = async (req, res) => {
  try {
    const doctor = await Doctor.findByPk(req.params.id, {
      include: [{ model: Department, as: "departments" }],
    });
    if (!doctor)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });
    res.json(doctor.departments);
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói l·∫•y chuy√™n khoa", error: err.message });
  }
};

// L·∫•y th√¥ng tin b√°c sƒ© theo user_id
const getDoctorByUserId = async (req, res) => {
  try {
    const doctor = await db.Doctor.findOne({
      where: { user_id: req.params.userId },
      include: [
        {
          model: db.Department,
          as: "departments",
          through: { attributes: [] },
        },
      ],
    });

    if (!doctor) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });
    }

    res.json(doctor);
  } catch (err) {
    console.error("L·ªói getDoctorByUserId:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: err.message });
  }
};

// L·∫•y danh s√°ch b√°c sƒ© theo khoa (ch·ªâ hi·ªán ƒë√£ ph√™ duy·ªát)
// controller: doctor.controller.js
const getDoctorsByDepartment = async (req, res) => {
  try {
    const department = await db.Department.findByPk(req.params.id);
    if (!department)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y chuy√™n khoa" });

    const doctors = await department.getDoctors({
      include: [
        {
          model: db.User,
          required: true, // üî¥ B·∫Øt bu·ªôc ph·∫£i join ƒë∆∞·ª£c user
          where: { status: "approved" }, // üî¥ Ch·ªâ l·∫•y b√°c sƒ© c√≥ user ƒë∆∞·ª£c duy·ªát
          attributes: ["id", "email", "name", "status"],
        },
      ],
    });

    res.json(doctors);
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói l·∫•y danh s√°ch b√°c sƒ©", error: err.message });
  }
};

// G√°n danh s√°ch d·ªãch v·ª• cho b√°c sƒ©
const setServices = async (req, res) => {
  try {
    const doctor = await db.Doctor.findByPk(req.params.id);
    if (!doctor)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });

    const { serviceIds } = req.body;
    if (!Array.isArray(serviceIds)) {
      return res
        .status(400)
        .json({ message: "Danh s√°ch d·ªãch v·ª• kh√¥ng h·ª£p l·ªá" });
    }

    await doctor.setServices(serviceIds);
    res.json({ message: "ƒê√£ c·∫≠p nh·∫≠t d·ªãch v·ª• cho b√°c sƒ©." });
  } catch (err) {
    res
      .status(500)
      .json({ message: "L·ªói c·∫≠p nh·∫≠t d·ªãch v·ª•", error: err.message });
  }
};

const getServicesOfDoctor = async (req, res) => {
  try {
    const doctor = await db.Doctor.findByPk(req.params.id, {
      include: [
        {
          model: db.Service,
          as: "services",
          include: [
            {
              model: db.Department,
              as: "departments", // ‚úÖ c·∫ßn d√≤ng n√†y
              through: { attributes: [] },
            },
          ],
          through: { attributes: [] },
        },
      ],
    });

    if (!doctor) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√°c sƒ©" });
    }

    res.json(doctor.services);
  } catch (err) {
    console.error("L·ªói getServicesOfDoctor:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: err.message });
  }
};

// ‚úÖ L·∫•y danh s√°ch b√°c sƒ© th·ª±c hi·ªán m·ªôt d·ªãch v·ª•
const getDoctorsByService = async (req, res) => {
  try {
    const service = await db.Service.findByPk(req.params.id, {
      include: [
        {
          model: db.Doctor,
          as: "doctors",
          include: [
            {
              model: db.User,
              required: true,
              where: { status: "approved" },
              attributes: ["id", "name", "email", "status"],
            },
          ],
          through: { attributes: [] },
        },
      ],
    });

    if (!service) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•" });
    }

    res.json(service.doctors);
  } catch (err) {
    console.error("L·ªói getDoctorsByService:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß", error: err.message });
  }
};

module.exports = {
  getAllDoctors,
  getDoctorById,
  createDoctor,
  updateDoctor,
  deleteDoctor,
  setDepartments,
  getDepartmentsOfDoctor,
  getDoctorByUserId,
  getDoctorsByDepartment,
  setServices,
  getServicesOfDoctor,
  getDoctorsByService,
};
